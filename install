#hostnamectl set-hostname k8s1

systemctl stop firewalld.service
systemctl disable firewalld.service

#sed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config

cat >> /etc/hosts << EOF
192.168.6.194 registry.zhongwen.com
#192.168.6.191 k8s1 
#192.168.6.192 k8s2 
#192.168.6.193 k8s3 
EOF

echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf

swapoff -a
sed -i 's/.*swap.*/#&/' /etc/fstab

modprobe br_netfilter
cat >> /etc/sysctl.d/k8s.conf << EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

sysctl --system

tar -zxvf kube.tar.gz

tar -zxvf createrepo.tar.gz

yum -y install createrepo/*.rpm

cat <<EOF > /etc/yum.repos.d/docker.repo
[docker]
name=docker
baseurl=file:///root/root/docker-ce/
gpgcheck=0
enables=1
EOF

createrepo -d /root/root/docker-ce

yum clean all

yum -y install docker-ce

systemctl enable docker
systemctl start docker

yum install -y kubelet kubeadm kubectl

systemctl enable kubelet.service
systemctl start kubelet.service

#docker load < k8s.tar
#docker tag 192.168.6.194:5000/flannel:v0.11.0-amd64 quay.io/coreos/flannel:v0.11.0-amd64
#docker rmi 192.168.6.194:5000/flannel:v0.11.0-amd64

mkdir -p /etc/docker/certs.d/registry.zhongwen.com
#mkdir certs
cp /root/certs/domain.crt /etc/docker/certs.d/registry.zhongwen.com/ca.crt

kubeadm init --apiserver-advertise-address=192.168.6.191 --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16 --image-repository registry.zhongwen.com



#no root
mkdir -p /root/.kube
cp /etc/kubernetes/admin.conf /root/.kube/config

#root
export KUBECONFIG=/etc/kubernetes/admin.conf

docker pull registry.zhongwen.com/flannel:v0.11.0-amd64
docker tag registry.zhongwen.com/flannel:v0.11.0-amd64 quay.io/coreos/flannel:v0.11.0-amd64
kubectl apply -f root/docker-ce/kube-flannel.yml

sed -i 's/192.168.6.194:5000/registry.zhongwen.com/g' /root/root/docker-ce/kubernetes-dashboard.yaml
sed -i '/targetPort:/a\ \ \ \ \ \ nodePort: 30001\n\ \ type: NodePort' /root/root/docker-ce/kubernetes-dashboard.yaml
kubectl  create -f /root/root/docker-ce/kubernetes-dashboard.yaml

kubectl create serviceaccount  dashboard-admin -n kube-system
kubectl create clusterrolebinding  dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin
kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk '/dashboard-admin/{print $1}')

exit
